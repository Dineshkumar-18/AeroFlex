// <auto-generated />
using System;
using AeroFlex.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AeroFlex.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910064800_userorlemappingcorrection")]
    partial class userorlemappingcorrection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AeroFlex.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AeroFlex.Models.Airline", b =>
                {
                    b.Property<int>("AirlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirlineId"));

                    b.Property<string>("AirlineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Headquarters")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("AirlineId");

                    b.HasIndex("FlightOwnerId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("AeroFlex.Models.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirportId"));

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AirportId");

                    b.HasIndex("CountryId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("AeroFlex.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<int>("FlightPricingId")
                        .HasColumnType("int");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalPassengers")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("FlightPricingId");

                    b.HasIndex("FlightScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AeroFlex.Models.CancellationFee", b =>
                {
                    b.Property<int>("CancellationFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CancellationFeeId"));

                    b.Property<DateTime>("ApplicableDueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ChargeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<decimal>("PlatformFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CancellationFeeId");

                    b.HasIndex("FlightScheduleId");

                    b.ToTable("CancellationFees");
                });

            modelBuilder.Entity("AeroFlex.Models.CancellationInfo", b =>
                {
                    b.Property<int>("CancellationId")
                        .HasColumnType("int");

                    b.Property<int>("CancellationFeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CancelledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("RefundAmount")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("CancellationId");

                    b.HasIndex("CancellationFeeId")
                        .IsUnique();

                    b.HasIndex("PassengerId")
                        .IsUnique();

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.ToTable("CancellationInfos");
                });

            modelBuilder.Entity("AeroFlex.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("AeroFlex.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("CountryId");

                    b.HasIndex("CurrencyId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AeroFlex.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("AeroFlex.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<string>("AirCraftType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalAirportId")
                        .HasColumnType("int");

                    b.Property<int>("DepartureAirportId")
                        .HasColumnType("int");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("FlightType")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightPricing", b =>
                {
                    b.Property<int>("FlightPricingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightPricingId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DemandMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("FlightTaxId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SeasonalMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Totalprice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FlightPricingId");

                    b.HasIndex("FlightScheduleId");

                    b.HasIndex("FlightTaxId");

                    b.ToTable("FlightsPricings");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightSchedule", b =>
                {
                    b.Property<int>("FlightScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightScheduleId"));

                    b.Property<int>("ArrivalAirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartureAirportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("FlightStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FlightScheduleId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightsSchedules");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightScheduleClass", b =>
                {
                    b.Property<int>("FlightclassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightclassId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("FlightclassId");

                    b.HasIndex("FlightScheduleId");

                    b.ToTable("FlightScheduleClasses");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightSegment", b =>
                {
                    b.Property<int>("FlightSegmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightSegmentId"));

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStop")
                        .HasColumnType("bit");

                    b.Property<int>("ItineraryId")
                        .HasColumnType("int");

                    b.Property<int>("StopOrder")
                        .HasColumnType("int");

                    b.HasKey("FlightSegmentId");

                    b.HasIndex("FlightScheduleId");

                    b.HasIndex("ItineraryId");

                    b.ToTable("FlightSegments");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightTax", b =>
                {
                    b.Property<int>("FlightTaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightTaxId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TravelType")
                        .HasColumnType("int");

                    b.HasKey("FlightTaxId");

                    b.HasIndex("ClassId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("FlightTaxes");
                });

            modelBuilder.Entity("AeroFlex.Models.Itinerary", b =>
                {
                    b.Property<int>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryId"));

                    b.Property<int>("EndAirportId")
                        .HasColumnType("int");

                    b.Property<int>("StartAirportId")
                        .HasColumnType("int");

                    b.Property<int>("TotalStops")
                        .HasColumnType("int");

                    b.HasKey("ItineraryId");

                    b.HasIndex("EndAirportId");

                    b.HasIndex("StartAirportId");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("AeroFlex.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("PassengerStatus")
                        .HasColumnType("int");

                    b.Property<int>("PassengerType")
                        .HasColumnType("int");

                    b.HasKey("PassengerId");

                    b.HasIndex("BookingId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("AeroFlex.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int?>("BalanceAmount")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("PaidAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AeroFlex.Models.RefreshTokenInfo", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokenInfos");
                });

            modelBuilder.Entity("AeroFlex.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<int>("CancellationId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("int");

                    b.HasKey("RefundId");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("AeroFlex.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AeroFlex.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("FlightScheduleClassId")
                        .HasColumnType("int");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<decimal>("SeatPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatTypePricingId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("BookingId");

                    b.HasIndex("FlightScheduleClassId");

                    b.HasIndex("FlightScheduleId");

                    b.HasIndex("PassengerId")
                        .IsUnique()
                        .HasFilter("[PassengerId] IS NOT NULL");

                    b.HasIndex("SeatTypePricingId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("AeroFlex.Models.SeatTypePricing", b =>
                {
                    b.Property<int>("SeatTypePricingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatTypePricingId"));

                    b.Property<int>("FlightScheduleClassId")
                        .HasColumnType("int");

                    b.Property<int>("FlightScheduleId")
                        .HasColumnType("int");

                    b.Property<decimal>("SeatPriceByType")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatTypeName")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPriceByClassAndType")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SeatTypePricingId");

                    b.HasIndex("FlightScheduleClassId");

                    b.HasIndex("FlightScheduleId");

                    b.ToTable("SeatTypePricings");
                });

            modelBuilder.Entity("AeroFlex.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("BookingId");

                    b.HasIndex("PassengerId")
                        .IsUnique();

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AeroFlex.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AeroFlex.Models.UserRoleMapping", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleMappingId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMappings");
                });

            modelBuilder.Entity("AeroFlex.Models.Admin", b =>
                {
                    b.HasBaseType("AeroFlex.Models.User");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("AeroFlex.Models.FlightOwner", b =>
                {
                    b.HasBaseType("AeroFlex.Models.User");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatingLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalFlightsManaged")
                        .HasColumnType("int");

                    b.ToTable("FlightOwners", (string)null);
                });

            modelBuilder.Entity("AeroFlex.Models.Airline", b =>
                {
                    b.HasOne("AeroFlex.Models.FlightOwner", "FlightOwner")
                        .WithMany("Airlines")
                        .HasForeignKey("FlightOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightOwner");
                });

            modelBuilder.Entity("AeroFlex.Models.Airport", b =>
                {
                    b.HasOne("AeroFlex.Models.Country", "Country")
                        .WithMany("Airports")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AeroFlex.Models.Booking", b =>
                {
                    b.HasOne("AeroFlex.Models.FlightPricing", "FlightPricing")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightPricingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlightPricing");

                    b.Navigation("FlightSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AeroFlex.Models.CancellationFee", b =>
                {
                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany()
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightSchedule");
                });

            modelBuilder.Entity("AeroFlex.Models.CancellationInfo", b =>
                {
                    b.HasOne("AeroFlex.Models.CancellationFee", "CancellationFee")
                        .WithOne("CancellationInfo")
                        .HasForeignKey("AeroFlex.Models.CancellationInfo", "CancellationFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany("CancellationInfos")
                        .HasForeignKey("CancellationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Passenger", "Passenger")
                        .WithOne("CancellationInfo")
                        .HasForeignKey("AeroFlex.Models.CancellationInfo", "PassengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Seat", "CancelledSeat")
                        .WithOne("CancellationInfo")
                        .HasForeignKey("AeroFlex.Models.CancellationInfo", "SeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CancellationFee");

                    b.Navigation("CancelledSeat");

                    b.Navigation("FlightSchedule");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("AeroFlex.Models.Country", b =>
                {
                    b.HasOne("AeroFlex.Models.Currency", "Currency")
                        .WithOne("Country")
                        .HasForeignKey("AeroFlex.Models.Country", "CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("AeroFlex.Models.Flight", b =>
                {
                    b.HasOne("AeroFlex.Models.Airline", "Airline")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Airport", "ArrivalAirport")
                        .WithMany("Arrivals")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Airport", "DepartureAirport")
                        .WithMany("Departures")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightPricing", b =>
                {
                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany("FlightPricing")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.FlightTax", "FlightTax")
                        .WithMany("FlightPricings")
                        .HasForeignKey("FlightTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightSchedule");

                    b.Navigation("FlightTax");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightSchedule", b =>
                {
                    b.HasOne("AeroFlex.Models.Airport", "ArrivalAirport")
                        .WithMany("ScheduleArrivals")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Airport", "DepartureAirport")
                        .WithMany("ScheduleDepartures")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Flight", "Flight")
                        .WithMany("FlightSchedules")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightScheduleClass", b =>
                {
                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany("FlightScheduleClasses")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightSchedule");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightSegment", b =>
                {
                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany("FlightSegments")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Itinerary", "Itinerary")
                        .WithMany("FlightSegments")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightSchedule");

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightTax", b =>
                {
                    b.HasOne("AeroFlex.Models.Class", "FlightClass")
                        .WithMany("FlightTaxes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Country", "Country")
                        .WithMany("FlightTaxes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Currency", "Currency")
                        .WithMany("FlightTaxes")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("FlightClass");
                });

            modelBuilder.Entity("AeroFlex.Models.Itinerary", b =>
                {
                    b.HasOne("AeroFlex.Models.Airport", "EndAirport")
                        .WithMany("EndJourney")
                        .HasForeignKey("EndAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Airport", "StartAirport")
                        .WithMany("StartJourney")
                        .HasForeignKey("StartAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndAirport");

                    b.Navigation("StartAirport");
                });

            modelBuilder.Entity("AeroFlex.Models.Passenger", b =>
                {
                    b.HasOne("AeroFlex.Models.Booking", "Booking")
                        .WithMany("Passengers")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AeroFlex.Models.Payment", b =>
                {
                    b.HasOne("AeroFlex.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("AeroFlex.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AeroFlex.Models.RefreshTokenInfo", b =>
                {
                    b.HasOne("AeroFlex.Models.User", "User")
                        .WithOne("RefreshTokenInfo")
                        .HasForeignKey("AeroFlex.Models.RefreshTokenInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AeroFlex.Models.Refund", b =>
                {
                    b.HasOne("AeroFlex.Models.CancellationInfo", "CancellationInfo")
                        .WithOne("Refund")
                        .HasForeignKey("AeroFlex.Models.Refund", "CancellationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancellationInfo");
                });

            modelBuilder.Entity("AeroFlex.Models.Seat", b =>
                {
                    b.HasOne("AeroFlex.Models.Booking", "Booking")
                        .WithMany("Seats")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AeroFlex.Models.FlightScheduleClass", "FlightScheduleClass")
                        .WithMany("Seats")
                        .HasForeignKey("FlightScheduleClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany("Seats")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Passenger", "Passenger")
                        .WithOne("Seat")
                        .HasForeignKey("AeroFlex.Models.Seat", "PassengerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AeroFlex.Models.SeatTypePricing", "SeatTypePricing")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypePricingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("FlightSchedule");

                    b.Navigation("FlightScheduleClass");

                    b.Navigation("Passenger");

                    b.Navigation("SeatTypePricing");
                });

            modelBuilder.Entity("AeroFlex.Models.SeatTypePricing", b =>
                {
                    b.HasOne("AeroFlex.Models.FlightScheduleClass", "FlightScheduleClass")
                        .WithMany("SeatTypePricings")
                        .HasForeignKey("FlightScheduleClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.FlightSchedule", "FlightSchedule")
                        .WithMany("SeatTypePricing")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlightSchedule");

                    b.Navigation("FlightScheduleClass");
                });

            modelBuilder.Entity("AeroFlex.Models.Ticket", b =>
                {
                    b.HasOne("AeroFlex.Models.Booking", null)
                        .WithMany("Ticket")
                        .HasForeignKey("BookingId");

                    b.HasOne("AeroFlex.Models.Passenger", "Passenger")
                        .WithOne("Ticket")
                        .HasForeignKey("AeroFlex.Models.Ticket", "PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.Seat", "Seat")
                        .WithOne("Ticket")
                        .HasForeignKey("AeroFlex.Models.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("AeroFlex.Models.User", b =>
                {
                    b.HasOne("AeroFlex.Models.Address", "Address")
                        .WithOne("User")
                        .HasForeignKey("AeroFlex.Models.User", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AeroFlex.Models.UserRoleMapping", b =>
                {
                    b.HasOne("AeroFlex.Models.Role", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AeroFlex.Models.User", "User")
                        .WithMany("RoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AeroFlex.Models.Admin", b =>
                {
                    b.HasOne("AeroFlex.Models.User", null)
                        .WithOne()
                        .HasForeignKey("AeroFlex.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AeroFlex.Models.FlightOwner", b =>
                {
                    b.HasOne("AeroFlex.Models.User", null)
                        .WithOne()
                        .HasForeignKey("AeroFlex.Models.FlightOwner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AeroFlex.Models.Address", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("AeroFlex.Models.Airline", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AeroFlex.Models.Airport", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("Departures");

                    b.Navigation("EndJourney");

                    b.Navigation("ScheduleArrivals");

                    b.Navigation("ScheduleDepartures");

                    b.Navigation("StartJourney");
                });

            modelBuilder.Entity("AeroFlex.Models.Booking", b =>
                {
                    b.Navigation("Passengers");

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Seats");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AeroFlex.Models.CancellationFee", b =>
                {
                    b.Navigation("CancellationInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("AeroFlex.Models.CancellationInfo", b =>
                {
                    b.Navigation("Refund")
                        .IsRequired();
                });

            modelBuilder.Entity("AeroFlex.Models.Class", b =>
                {
                    b.Navigation("FlightTaxes");
                });

            modelBuilder.Entity("AeroFlex.Models.Country", b =>
                {
                    b.Navigation("Airports");

                    b.Navigation("FlightTaxes");
                });

            modelBuilder.Entity("AeroFlex.Models.Currency", b =>
                {
                    b.Navigation("Country")
                        .IsRequired();

                    b.Navigation("FlightTaxes");
                });

            modelBuilder.Entity("AeroFlex.Models.Flight", b =>
                {
                    b.Navigation("FlightSchedules");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightPricing", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightSchedule", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CancellationInfos");

                    b.Navigation("FlightPricing");

                    b.Navigation("FlightScheduleClasses");

                    b.Navigation("FlightSegments");

                    b.Navigation("SeatTypePricing");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightScheduleClass", b =>
                {
                    b.Navigation("SeatTypePricings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightTax", b =>
                {
                    b.Navigation("FlightPricings");
                });

            modelBuilder.Entity("AeroFlex.Models.Itinerary", b =>
                {
                    b.Navigation("FlightSegments");
                });

            modelBuilder.Entity("AeroFlex.Models.Passenger", b =>
                {
                    b.Navigation("CancellationInfo")
                        .IsRequired();

                    b.Navigation("Seat")
                        .IsRequired();

                    b.Navigation("Ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("AeroFlex.Models.Role", b =>
                {
                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("AeroFlex.Models.Seat", b =>
                {
                    b.Navigation("CancellationInfo")
                        .IsRequired();

                    b.Navigation("Ticket")
                        .IsRequired();
                });

            modelBuilder.Entity("AeroFlex.Models.SeatTypePricing", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("AeroFlex.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RefreshTokenInfo")
                        .IsRequired();

                    b.Navigation("RoleMappings");
                });

            modelBuilder.Entity("AeroFlex.Models.FlightOwner", b =>
                {
                    b.Navigation("Airlines");
                });
#pragma warning restore 612, 618
        }
    }
}
